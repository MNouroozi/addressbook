// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package addressbook

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ListPepoleClient is the client API for ListPepole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListPepoleClient interface {
	GetListPepole(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAddressBook, error)
}

type listPepoleClient struct {
	cc grpc.ClientConnInterface
}

func NewListPepoleClient(cc grpc.ClientConnInterface) ListPepoleClient {
	return &listPepoleClient{cc}
}

func (c *listPepoleClient) GetListPepole(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAddressBook, error) {
	out := new(GetAddressBook)
	err := c.cc.Invoke(ctx, "/addressbook.ListPepole/GetListPepole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListPepoleServer is the server API for ListPepole service.
// All implementations must embed UnimplementedListPepoleServer
// for forward compatibility
type ListPepoleServer interface {
	GetListPepole(context.Context, *emptypb.Empty) (*GetAddressBook, error)
	mustEmbedUnimplementedListPepoleServer()
}

// UnimplementedListPepoleServer must be embedded to have forward compatible implementations.
type UnimplementedListPepoleServer struct {
}

func (UnimplementedListPepoleServer) GetListPepole(context.Context, *emptypb.Empty) (*GetAddressBook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListPepole not implemented")
}
func (UnimplementedListPepoleServer) mustEmbedUnimplementedListPepoleServer() {}

// UnsafeListPepoleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListPepoleServer will
// result in compilation errors.
type UnsafeListPepoleServer interface {
	mustEmbedUnimplementedListPepoleServer()
}

func RegisterListPepoleServer(s grpc.ServiceRegistrar, srv ListPepoleServer) {
	s.RegisterService(&ListPepole_ServiceDesc, srv)
}

func _ListPepole_GetListPepole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListPepoleServer).GetListPepole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/addressbook.ListPepole/GetListPepole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListPepoleServer).GetListPepole(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ListPepole_ServiceDesc is the grpc.ServiceDesc for ListPepole service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListPepole_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "addressbook.ListPepole",
	HandlerType: (*ListPepoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetListPepole",
			Handler:    _ListPepole_GetListPepole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/addressbook.proto",
}
